//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JadncFilters.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class JadncFiltersLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, HASH=23, NOT_EQ1=24, NOT_EQ2=25, 
		K_ADD=26, K_AND=27, K_AS=28, K_CASE=29, K_CAST=30, K_DEFAULT=31, K_ELSE=32, 
		K_END=33, K_IF=34, K_IN=35, K_IS=36, K_ISNULL=37, K_LIKE=38, K_NOT=39, 
		K_NOTNULL=40, K_NULL=41, K_OF=42, K_OR=43, K_REGEXP=44, K_THEN=45, K_TO=46, 
		K_WHEN=47, K_STRING=48, K_NUMBER=49, K_DATE=50, K_BOOLEAN=51, K_TRUE=52, 
		K_FALSE=53, K_YES=54, K_NO=55, K_HAS=56, K_TYPE=57, IDENTIFIER_PART=58, 
		NUMERIC_LITERAL=59, STRING_LITERAL=60, DATE_LITERAL=61, SPACES=62, UNEXPECTED_CHAR=63;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", "PLUS", 
		"MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
		"LT", "LT_EQ", "GT", "GT_EQ", "EQ", "HASH", "NOT_EQ1", "NOT_EQ2", "K_ADD", 
		"K_AND", "K_AS", "K_CASE", "K_CAST", "K_DEFAULT", "K_ELSE", "K_END", "K_IF", 
		"K_IN", "K_IS", "K_ISNULL", "K_LIKE", "K_NOT", "K_NOTNULL", "K_NULL", 
		"K_OF", "K_OR", "K_REGEXP", "K_THEN", "K_TO", "K_WHEN", "K_STRING", "K_NUMBER", 
		"K_DATE", "K_BOOLEAN", "K_TRUE", "K_FALSE", "K_YES", "K_NO", "K_HAS", 
		"K_TYPE", "IDENTIFIER_PART", "NUMERIC_LITERAL", "STRING_LITERAL", "DATE_LITERAL", 
		"SPACES", "UNEXPECTED_CHAR", "DIGIT", "LETTER", "A", "B", "C", "D", "E", 
		"F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
		"T", "U", "V", "W", "X", "Y", "Z"
	};


	public JadncFiltersLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JadncFiltersLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'#'", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "HASH", "NOT_EQ1", "NOT_EQ2", 
		"K_ADD", "K_AND", "K_AS", "K_CASE", "K_CAST", "K_DEFAULT", "K_ELSE", "K_END", 
		"K_IF", "K_IN", "K_IS", "K_ISNULL", "K_LIKE", "K_NOT", "K_NOTNULL", "K_NULL", 
		"K_OF", "K_OR", "K_REGEXP", "K_THEN", "K_TO", "K_WHEN", "K_STRING", "K_NUMBER", 
		"K_DATE", "K_BOOLEAN", "K_TRUE", "K_FALSE", "K_YES", "K_NO", "K_HAS", 
		"K_TYPE", "IDENTIFIER_PART", "NUMERIC_LITERAL", "STRING_LITERAL", "DATE_LITERAL", 
		"SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JadncFilters.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JadncFiltersLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,63,546,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
		7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
		7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,
		21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,
		25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,
		29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
		38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,
		40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,
		46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
		53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,
		57,5,57,400,8,57,10,57,12,57,403,9,57,1,58,3,58,406,8,58,1,58,4,58,409,
		8,58,11,58,12,58,410,1,58,1,58,5,58,415,8,58,10,58,12,58,418,9,58,3,58,
		420,8,58,1,58,1,58,3,58,424,8,58,1,58,4,58,427,8,58,11,58,12,58,428,3,
		58,431,8,58,1,58,1,58,4,58,435,8,58,11,58,12,58,436,1,58,1,58,3,58,441,
		8,58,1,58,4,58,444,8,58,11,58,12,58,445,3,58,448,8,58,3,58,450,8,58,1,
		59,1,59,1,59,1,59,5,59,456,8,59,10,59,12,59,459,9,59,1,59,1,59,1,60,1,
		60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
		60,1,60,1,60,3,60,481,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,63,
		1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,
		1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,
		1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,
		1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,0,0,91,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
		77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
		101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
		121,61,123,62,125,63,127,0,129,0,131,0,133,0,135,0,137,0,139,0,141,0,143,
		0,145,0,147,0,149,0,151,0,153,0,155,0,157,0,159,0,161,0,163,0,165,0,167,
		0,169,0,171,0,173,0,175,0,177,0,179,0,181,0,1,0,32,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,2,0,43,43,45,45,1,0,39,39,3,0,9,11,13,
		13,32,32,1,0,48,57,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,
		68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,
		0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,
		2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,
		2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,
		2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,
		2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,533,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
		1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,
		1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,183,1,0,0,0,3,185,1,0,0,0,5,187,
		1,0,0,0,7,189,1,0,0,0,9,191,1,0,0,0,11,193,1,0,0,0,13,195,1,0,0,0,15,197,
		1,0,0,0,17,199,1,0,0,0,19,201,1,0,0,0,21,203,1,0,0,0,23,206,1,0,0,0,25,
		208,1,0,0,0,27,210,1,0,0,0,29,213,1,0,0,0,31,216,1,0,0,0,33,218,1,0,0,
		0,35,220,1,0,0,0,37,222,1,0,0,0,39,225,1,0,0,0,41,227,1,0,0,0,43,230,1,
		0,0,0,45,233,1,0,0,0,47,235,1,0,0,0,49,238,1,0,0,0,51,241,1,0,0,0,53,245,
		1,0,0,0,55,249,1,0,0,0,57,252,1,0,0,0,59,257,1,0,0,0,61,262,1,0,0,0,63,
		270,1,0,0,0,65,275,1,0,0,0,67,279,1,0,0,0,69,282,1,0,0,0,71,285,1,0,0,
		0,73,288,1,0,0,0,75,295,1,0,0,0,77,300,1,0,0,0,79,304,1,0,0,0,81,312,1,
		0,0,0,83,317,1,0,0,0,85,320,1,0,0,0,87,323,1,0,0,0,89,330,1,0,0,0,91,335,
		1,0,0,0,93,338,1,0,0,0,95,343,1,0,0,0,97,350,1,0,0,0,99,357,1,0,0,0,101,
		362,1,0,0,0,103,370,1,0,0,0,105,375,1,0,0,0,107,381,1,0,0,0,109,385,1,
		0,0,0,111,388,1,0,0,0,113,392,1,0,0,0,115,397,1,0,0,0,117,449,1,0,0,0,
		119,451,1,0,0,0,121,462,1,0,0,0,123,484,1,0,0,0,125,488,1,0,0,0,127,490,
		1,0,0,0,129,492,1,0,0,0,131,494,1,0,0,0,133,496,1,0,0,0,135,498,1,0,0,
		0,137,500,1,0,0,0,139,502,1,0,0,0,141,504,1,0,0,0,143,506,1,0,0,0,145,
		508,1,0,0,0,147,510,1,0,0,0,149,512,1,0,0,0,151,514,1,0,0,0,153,516,1,
		0,0,0,155,518,1,0,0,0,157,520,1,0,0,0,159,522,1,0,0,0,161,524,1,0,0,0,
		163,526,1,0,0,0,165,528,1,0,0,0,167,530,1,0,0,0,169,532,1,0,0,0,171,534,
		1,0,0,0,173,536,1,0,0,0,175,538,1,0,0,0,177,540,1,0,0,0,179,542,1,0,0,
		0,181,544,1,0,0,0,183,184,5,59,0,0,184,2,1,0,0,0,185,186,5,46,0,0,186,
		4,1,0,0,0,187,188,5,40,0,0,188,6,1,0,0,0,189,190,5,41,0,0,190,8,1,0,0,
		0,191,192,5,44,0,0,192,10,1,0,0,0,193,194,5,61,0,0,194,12,1,0,0,0,195,
		196,5,42,0,0,196,14,1,0,0,0,197,198,5,43,0,0,198,16,1,0,0,0,199,200,5,
		45,0,0,200,18,1,0,0,0,201,202,5,126,0,0,202,20,1,0,0,0,203,204,5,124,0,
		0,204,205,5,124,0,0,205,22,1,0,0,0,206,207,5,47,0,0,207,24,1,0,0,0,208,
		209,5,37,0,0,209,26,1,0,0,0,210,211,5,60,0,0,211,212,5,60,0,0,212,28,1,
		0,0,0,213,214,5,62,0,0,214,215,5,62,0,0,215,30,1,0,0,0,216,217,5,38,0,
		0,217,32,1,0,0,0,218,219,5,124,0,0,219,34,1,0,0,0,220,221,5,60,0,0,221,
		36,1,0,0,0,222,223,5,60,0,0,223,224,5,61,0,0,224,38,1,0,0,0,225,226,5,
		62,0,0,226,40,1,0,0,0,227,228,5,62,0,0,228,229,5,61,0,0,229,42,1,0,0,0,
		230,231,5,61,0,0,231,232,5,61,0,0,232,44,1,0,0,0,233,234,5,35,0,0,234,
		46,1,0,0,0,235,236,5,33,0,0,236,237,5,61,0,0,237,48,1,0,0,0,238,239,5,
		60,0,0,239,240,5,62,0,0,240,50,1,0,0,0,241,242,3,131,65,0,242,243,3,137,
		68,0,243,244,3,137,68,0,244,52,1,0,0,0,245,246,3,131,65,0,246,247,3,157,
		78,0,247,248,3,137,68,0,248,54,1,0,0,0,249,250,3,131,65,0,250,251,3,167,
		83,0,251,56,1,0,0,0,252,253,3,135,67,0,253,254,3,131,65,0,254,255,3,167,
		83,0,255,256,3,139,69,0,256,58,1,0,0,0,257,258,3,135,67,0,258,259,3,131,
		65,0,259,260,3,167,83,0,260,261,3,169,84,0,261,60,1,0,0,0,262,263,3,137,
		68,0,263,264,3,139,69,0,264,265,3,141,70,0,265,266,3,131,65,0,266,267,
		3,171,85,0,267,268,3,153,76,0,268,269,3,169,84,0,269,62,1,0,0,0,270,271,
		3,139,69,0,271,272,3,153,76,0,272,273,3,167,83,0,273,274,3,139,69,0,274,
		64,1,0,0,0,275,276,3,139,69,0,276,277,3,157,78,0,277,278,3,137,68,0,278,
		66,1,0,0,0,279,280,3,147,73,0,280,281,3,141,70,0,281,68,1,0,0,0,282,283,
		3,147,73,0,283,284,3,157,78,0,284,70,1,0,0,0,285,286,3,147,73,0,286,287,
		3,167,83,0,287,72,1,0,0,0,288,289,3,147,73,0,289,290,3,167,83,0,290,291,
		3,157,78,0,291,292,3,171,85,0,292,293,3,153,76,0,293,294,3,153,76,0,294,
		74,1,0,0,0,295,296,3,153,76,0,296,297,3,147,73,0,297,298,3,151,75,0,298,
		299,3,139,69,0,299,76,1,0,0,0,300,301,3,157,78,0,301,302,3,159,79,0,302,
		303,3,169,84,0,303,78,1,0,0,0,304,305,3,157,78,0,305,306,3,159,79,0,306,
		307,3,169,84,0,307,308,3,157,78,0,308,309,3,171,85,0,309,310,3,153,76,
		0,310,311,3,153,76,0,311,80,1,0,0,0,312,313,3,157,78,0,313,314,3,171,85,
		0,314,315,3,153,76,0,315,316,3,153,76,0,316,82,1,0,0,0,317,318,3,159,79,
		0,318,319,3,141,70,0,319,84,1,0,0,0,320,321,3,159,79,0,321,322,3,165,82,
		0,322,86,1,0,0,0,323,324,3,165,82,0,324,325,3,139,69,0,325,326,3,143,71,
		0,326,327,3,139,69,0,327,328,3,177,88,0,328,329,3,161,80,0,329,88,1,0,
		0,0,330,331,3,169,84,0,331,332,3,145,72,0,332,333,3,139,69,0,333,334,3,
		157,78,0,334,90,1,0,0,0,335,336,3,169,84,0,336,337,3,159,79,0,337,92,1,
		0,0,0,338,339,3,175,87,0,339,340,3,145,72,0,340,341,3,139,69,0,341,342,
		3,157,78,0,342,94,1,0,0,0,343,344,3,167,83,0,344,345,3,169,84,0,345,346,
		3,165,82,0,346,347,3,147,73,0,347,348,3,157,78,0,348,349,3,143,71,0,349,
		96,1,0,0,0,350,351,3,157,78,0,351,352,3,171,85,0,352,353,3,155,77,0,353,
		354,3,133,66,0,354,355,3,139,69,0,355,356,3,165,82,0,356,98,1,0,0,0,357,
		358,3,137,68,0,358,359,3,131,65,0,359,360,3,169,84,0,360,361,3,139,69,
		0,361,100,1,0,0,0,362,363,3,133,66,0,363,364,3,159,79,0,364,365,3,159,
		79,0,365,366,3,153,76,0,366,367,3,139,69,0,367,368,3,131,65,0,368,369,
		3,157,78,0,369,102,1,0,0,0,370,371,3,169,84,0,371,372,3,165,82,0,372,373,
		3,171,85,0,373,374,3,139,69,0,374,104,1,0,0,0,375,376,3,141,70,0,376,377,
		3,131,65,0,377,378,3,153,76,0,378,379,3,167,83,0,379,380,3,139,69,0,380,
		106,1,0,0,0,381,382,3,179,89,0,382,383,3,139,69,0,383,384,3,167,83,0,384,
		108,1,0,0,0,385,386,3,157,78,0,386,387,3,159,79,0,387,110,1,0,0,0,388,
		389,3,145,72,0,389,390,3,131,65,0,390,391,3,167,83,0,391,112,1,0,0,0,392,
		393,3,169,84,0,393,394,3,179,89,0,394,395,3,161,80,0,395,396,3,139,69,
		0,396,114,1,0,0,0,397,401,7,0,0,0,398,400,7,1,0,0,399,398,1,0,0,0,400,
		403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,116,1,0,0,0,403,401,1,
		0,0,0,404,406,3,17,8,0,405,404,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,
		407,409,3,127,63,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,
		411,1,0,0,0,411,419,1,0,0,0,412,416,5,46,0,0,413,415,3,127,63,0,414,413,
		1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,420,1,0,0,
		0,418,416,1,0,0,0,419,412,1,0,0,0,419,420,1,0,0,0,420,430,1,0,0,0,421,
		423,3,139,69,0,422,424,7,2,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,426,
		1,0,0,0,425,427,3,127,63,0,426,425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,
		0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,421,1,0,0,0,430,431,1,0,0,0,431,
		450,1,0,0,0,432,434,5,46,0,0,433,435,3,127,63,0,434,433,1,0,0,0,435,436,
		1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,447,1,0,0,0,438,440,3,139,
		69,0,439,441,7,2,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,
		444,3,127,63,0,443,442,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,
		1,0,0,0,446,448,1,0,0,0,447,438,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,
		0,449,405,1,0,0,0,449,432,1,0,0,0,450,118,1,0,0,0,451,457,5,39,0,0,452,
		456,8,3,0,0,453,454,5,39,0,0,454,456,5,39,0,0,455,452,1,0,0,0,455,453,
		1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,
		0,459,457,1,0,0,0,460,461,5,39,0,0,461,120,1,0,0,0,462,463,3,45,22,0,463,
		464,3,127,63,0,464,465,3,127,63,0,465,466,3,127,63,0,466,467,3,127,63,
		0,467,468,3,17,8,0,468,469,3,127,63,0,469,470,3,127,63,0,470,471,3,17,
		8,0,471,472,3,127,63,0,472,480,3,127,63,0,473,474,5,32,0,0,474,475,3,127,
		63,0,475,476,3,127,63,0,476,477,5,58,0,0,477,478,3,127,63,0,478,479,3,
		127,63,0,479,481,1,0,0,0,480,473,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,
		0,482,483,3,45,22,0,483,122,1,0,0,0,484,485,7,4,0,0,485,486,1,0,0,0,486,
		487,6,61,0,0,487,124,1,0,0,0,488,489,9,0,0,0,489,126,1,0,0,0,490,491,7,
		5,0,0,491,128,1,0,0,0,492,493,7,0,0,0,493,130,1,0,0,0,494,495,7,6,0,0,
		495,132,1,0,0,0,496,497,7,7,0,0,497,134,1,0,0,0,498,499,7,8,0,0,499,136,
		1,0,0,0,500,501,7,9,0,0,501,138,1,0,0,0,502,503,7,10,0,0,503,140,1,0,0,
		0,504,505,7,11,0,0,505,142,1,0,0,0,506,507,7,12,0,0,507,144,1,0,0,0,508,
		509,7,13,0,0,509,146,1,0,0,0,510,511,7,14,0,0,511,148,1,0,0,0,512,513,
		7,15,0,0,513,150,1,0,0,0,514,515,7,16,0,0,515,152,1,0,0,0,516,517,7,17,
		0,0,517,154,1,0,0,0,518,519,7,18,0,0,519,156,1,0,0,0,520,521,7,19,0,0,
		521,158,1,0,0,0,522,523,7,20,0,0,523,160,1,0,0,0,524,525,7,21,0,0,525,
		162,1,0,0,0,526,527,7,22,0,0,527,164,1,0,0,0,528,529,7,23,0,0,529,166,
		1,0,0,0,530,531,7,24,0,0,531,168,1,0,0,0,532,533,7,25,0,0,533,170,1,0,
		0,0,534,535,7,26,0,0,535,172,1,0,0,0,536,537,7,27,0,0,537,174,1,0,0,0,
		538,539,7,28,0,0,539,176,1,0,0,0,540,541,7,29,0,0,541,178,1,0,0,0,542,
		543,7,30,0,0,543,180,1,0,0,0,544,545,7,31,0,0,545,182,1,0,0,0,17,0,401,
		405,410,416,419,423,428,430,436,440,445,447,449,455,457,480,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage
