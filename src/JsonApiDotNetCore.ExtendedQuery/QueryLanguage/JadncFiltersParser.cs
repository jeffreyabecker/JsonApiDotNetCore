//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JadncFilters.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class JadncFiltersParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BIND_PARAMETER=1, SCOL=2, DOT=3, OPEN_PAR=4, CLOSE_PAR=5, COMMA=6, ASSIGN=7, 
		STAR=8, PLUS=9, MINUS=10, TILDE=11, PIPE2=12, DIV=13, MOD=14, LT2=15, 
		GT2=16, AMP=17, PIPE=18, LT=19, LT_EQ=20, GT=21, GT_EQ=22, EQ=23, HASH=24, 
		NOT_EQ1=25, NOT_EQ2=26, K_ADD=27, K_AND=28, K_AS=29, K_CASE=30, K_CAST=31, 
		K_DEFAULT=32, K_ELSE=33, K_END=34, K_IF=35, K_IN=36, K_IS=37, K_ISNULL=38, 
		K_LIKE=39, K_NOT=40, K_NOTNULL=41, K_NULL=42, K_OF=43, K_OR=44, K_REGEXP=45, 
		K_THEN=46, K_TO=47, K_WHEN=48, K_STRING=49, K_NUMBER=50, K_DATE=51, K_BOOLEAN=52, 
		K_TRUE=53, K_FALSE=54, K_YES=55, K_NO=56, K_HAS=57, K_TYPE=58, IDENTIFIER=59, 
		NUMERIC_LITERAL=60, BOOLEAN_LITERAL=61, STRING_LITERAL=62, DATE_LITERAL=63, 
		SPACES=64, UNEXPECTED_CHAR=65;
	public const int
		RULE_expr = 0, RULE_literal_value = 1, RULE_function_name = 2;
	public static readonly string[] ruleNames = {
		"expr", "literal_value", "function_name"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", 
		"'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
		"'>'", "'>='", "'=='", "'#'", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BIND_PARAMETER", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", 
		"ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", 
		"GT2", "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "HASH", "NOT_EQ1", 
		"NOT_EQ2", "K_ADD", "K_AND", "K_AS", "K_CASE", "K_CAST", "K_DEFAULT", 
		"K_ELSE", "K_END", "K_IF", "K_IN", "K_IS", "K_ISNULL", "K_LIKE", "K_NOT", 
		"K_NOTNULL", "K_NULL", "K_OF", "K_OR", "K_REGEXP", "K_THEN", "K_TO", "K_WHEN", 
		"K_STRING", "K_NUMBER", "K_DATE", "K_BOOLEAN", "K_TRUE", "K_FALSE", "K_YES", 
		"K_NO", "K_HAS", "K_TYPE", "IDENTIFIER", "NUMERIC_LITERAL", "BOOLEAN_LITERAL", 
		"STRING_LITERAL", "DATE_LITERAL", "SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JadncFilters.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JadncFiltersParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JadncFiltersParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JadncFiltersParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OfTypeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(JadncFiltersParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OF() { return GetToken(JadncFiltersParser.K_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TYPE() { return GetToken(JadncFiltersParser.K_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JadncFiltersParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public OfTypeExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class HasExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_HAS() { return GetToken(JadncFiltersParser.K_HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JadncFiltersParser.IDENTIFIER, 0); }
		public HasExpressionContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class InExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IN() { return GetToken(JadncFiltersParser.K_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadncFiltersParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadncFiltersParser.COMMA, i);
		}
		public InExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class NestedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		public NestedExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(JadncFiltersParser.K_OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class GreaterLessExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JadncFiltersParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(JadncFiltersParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JadncFiltersParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(JadncFiltersParser.GT_EQ, 0); }
		public GreaterLessExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class FunctionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JadncFiltersParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadncFiltersParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadncFiltersParser.COMMA, i);
		}
		public FunctionExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class VariableExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND_PARAMETER() { return GetToken(JadncFiltersParser.BIND_PARAMETER, 0); }
		public VariableExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(JadncFiltersParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(JadncFiltersParser.MINUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class IsNullExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(JadncFiltersParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(JadncFiltersParser.K_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public IsNullExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class MulExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JadncFiltersParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(JadncFiltersParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(JadncFiltersParser.MOD, 0); }
		public MulExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class LikeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIKE() { return GetToken(JadncFiltersParser.K_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public LikeExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class IfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IF() { return GetToken(JadncFiltersParser.K_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN() { return GetToken(JadncFiltersParser.K_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSE() { return GetToken(JadncFiltersParser.K_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(JadncFiltersParser.K_END, 0); }
		public IfExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class EqualExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JadncFiltersParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(JadncFiltersParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ1() { return GetToken(JadncFiltersParser.NOT_EQ1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(JadncFiltersParser.NOT_EQ2, 0); }
		public EqualExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(JadncFiltersParser.K_AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_NULL:
			case K_TRUE:
			case K_FALSE:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case DATE_LITERAL:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7;
				literal_value();
				}
				break;
			case BIND_PARAMETER:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8;
				Match(BIND_PARAMETER);
				}
				break;
			case OPEN_PAR:
				{
				_localctx = new NestedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 9;
				Match(OPEN_PAR);
				State = 10;
				expr(0);
				State = 11;
				Match(CLOSE_PAR);
				}
				break;
			case K_NOT:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13;
				Match(K_NOT);
				State = 14;
				expr(14);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new FunctionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15;
				function_name();
				State = 16;
				Match(OPEN_PAR);
				State = 29;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIND_PARAMETER:
				case OPEN_PAR:
				case COMMA:
				case K_IF:
				case K_IS:
				case K_NOT:
				case K_NULL:
				case K_TRUE:
				case K_FALSE:
				case K_HAS:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case STRING_LITERAL:
				case DATE_LITERAL:
					{
					State = 18;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 17;
						Match(COMMA);
						}
					}

					State = 20;
					expr(0);
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 21;
						Match(COMMA);
						State = 22;
						expr(0);
						}
						}
						State = 27;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case STAR:
					{
					State = 28;
					Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 31;
				Match(CLOSE_PAR);
				}
				break;
			case K_IS:
				{
				_localctx = new OfTypeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33;
				Match(K_IS);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 34;
					Match(K_NOT);
					}
				}

				State = 37;
				Match(K_OF);
				State = 38;
				Match(K_TYPE);
				State = 39;
				Match(IDENTIFIER);
				}
				break;
			case K_HAS:
				{
				_localctx = new HasExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 40;
				Match(K_HAS);
				State = 41;
				Match(IDENTIFIER);
				}
				break;
			case K_IF:
				{
				_localctx = new IfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42;
				Match(K_IF);
				State = 43;
				expr(0);
				State = 44;
				Match(K_THEN);
				State = 45;
				expr(0);
				State = 46;
				Match(K_ELSE);
				State = 47;
				expr(0);
				State = 48;
				Match(K_END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 99;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new MulExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 53;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 24832L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 54;
						expr(14);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 55;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 56;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 57;
						expr(13);
						}
						break;
					case 3:
						{
						_localctx = new GreaterLessExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 59;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864320L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 60;
						expr(12);
						}
						break;
					case 4:
						{
						_localctx = new EqualExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 62;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 109052032L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 63;
						expr(11);
						}
						break;
					case 5:
						{
						_localctx = new LikeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 64;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 66;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 65;
							Match(K_NOT);
							}
						}

						State = 68;
						Match(K_LIKE);
						State = 69;
						expr(9);
						}
						break;
					case 6:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 71;
						Match(K_AND);
						State = 72;
						expr(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 74;
						Match(K_OR);
						State = 75;
						expr(2);
						}
						break;
					case 8:
						{
						_localctx = new IsNullExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 77;
						Match(K_IS);
						State = 79;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 78;
							Match(K_NOT);
							}
						}

						State = 81;
						Match(K_NULL);
						}
						break;
					case 9:
						{
						_localctx = new InExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 84;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 83;
							Match(K_NOT);
							}
						}

						State = 86;
						Match(K_IN);
						{
						State = 87;
						Match(OPEN_PAR);
						State = 96;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2711161306320207854L) != 0)) {
							{
							State = 88;
							expr(0);
							State = 93;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 89;
								Match(COMMA);
								State = 90;
								expr(0);
								}
								}
								State = 95;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 98;
						Match(CLOSE_PAR);
						}
						}
						break;
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
	 
		public Literal_valueContext() { }
		public virtual void CopyFrom(Literal_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StrLiteralContext : Literal_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JadncFiltersParser.STRING_LITERAL, 0); }
		public StrLiteralContext(Literal_valueContext context) { CopyFrom(context); }
	}
	public partial class NullLiteralContext : Literal_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(JadncFiltersParser.K_NULL, 0); }
		public NullLiteralContext(Literal_valueContext context) { CopyFrom(context); }
	}
	public partial class NumLiteralContext : Literal_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(JadncFiltersParser.NUMERIC_LITERAL, 0); }
		public NumLiteralContext(Literal_valueContext context) { CopyFrom(context); }
	}
	public partial class DateLiteralContext : Literal_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_LITERAL() { return GetToken(JadncFiltersParser.DATE_LITERAL, 0); }
		public DateLiteralContext(Literal_valueContext context) { CopyFrom(context); }
	}
	public partial class BooleanLiteralContext : Literal_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TRUE() { return GetToken(JadncFiltersParser.K_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FALSE() { return GetToken(JadncFiltersParser.K_FALSE, 0); }
		public BooleanLiteralContext(Literal_valueContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 2, RULE_literal_value);
		int _la;
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMERIC_LITERAL:
				_localctx = new NumLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				Match(NUMERIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new StrLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				Match(STRING_LITERAL);
				}
				break;
			case DATE_LITERAL:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				Match(DATE_LITERAL);
				}
				break;
			case K_TRUE:
			case K_FALSE:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 107;
				_la = TokenStream.LA(1);
				if ( !(_la==K_TRUE || _la==K_FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case K_NULL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				Match(K_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JadncFiltersParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,65,114,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,3,0,19,8,0,1,0,1,0,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,0,3,0,
		30,8,0,1,0,1,0,1,0,1,0,3,0,36,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,3,0,51,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,3,0,67,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,
		80,8,0,1,0,1,0,1,0,3,0,85,8,0,1,0,1,0,1,0,1,0,1,0,5,0,92,8,0,10,0,12,0,
		95,9,0,3,0,97,8,0,1,0,5,0,100,8,0,10,0,12,0,103,9,0,1,1,1,1,1,1,1,1,1,
		1,3,1,110,8,1,1,2,1,2,1,2,0,1,0,3,0,2,4,0,5,2,0,8,8,13,14,1,0,9,10,1,0,
		19,22,3,0,7,7,23,23,25,26,1,0,53,54,140,0,50,1,0,0,0,2,109,1,0,0,0,4,111,
		1,0,0,0,6,7,6,0,-1,0,7,51,3,2,1,0,8,51,5,1,0,0,9,10,5,4,0,0,10,11,3,0,
		0,0,11,12,5,5,0,0,12,51,1,0,0,0,13,14,5,40,0,0,14,51,3,0,0,14,15,16,3,
		4,2,0,16,29,5,4,0,0,17,19,5,6,0,0,18,17,1,0,0,0,18,19,1,0,0,0,19,20,1,
		0,0,0,20,25,3,0,0,0,21,22,5,6,0,0,22,24,3,0,0,0,23,21,1,0,0,0,24,27,1,
		0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,30,1,0,0,0,27,25,1,0,0,0,28,30,5,
		8,0,0,29,18,1,0,0,0,29,28,1,0,0,0,29,30,1,0,0,0,30,31,1,0,0,0,31,32,5,
		5,0,0,32,51,1,0,0,0,33,35,5,37,0,0,34,36,5,40,0,0,35,34,1,0,0,0,35,36,
		1,0,0,0,36,37,1,0,0,0,37,38,5,43,0,0,38,39,5,58,0,0,39,51,5,59,0,0,40,
		41,5,57,0,0,41,51,5,59,0,0,42,43,5,35,0,0,43,44,3,0,0,0,44,45,5,46,0,0,
		45,46,3,0,0,0,46,47,5,33,0,0,47,48,3,0,0,0,48,49,5,34,0,0,49,51,1,0,0,
		0,50,6,1,0,0,0,50,8,1,0,0,0,50,9,1,0,0,0,50,13,1,0,0,0,50,15,1,0,0,0,50,
		33,1,0,0,0,50,40,1,0,0,0,50,42,1,0,0,0,51,101,1,0,0,0,52,53,10,13,0,0,
		53,54,7,0,0,0,54,100,3,0,0,14,55,56,10,12,0,0,56,57,7,1,0,0,57,100,3,0,
		0,13,58,59,10,11,0,0,59,60,7,2,0,0,60,100,3,0,0,12,61,62,10,10,0,0,62,
		63,7,3,0,0,63,100,3,0,0,11,64,66,10,8,0,0,65,67,5,40,0,0,66,65,1,0,0,0,
		66,67,1,0,0,0,67,68,1,0,0,0,68,69,5,39,0,0,69,100,3,0,0,9,70,71,10,2,0,
		0,71,72,5,28,0,0,72,100,3,0,0,3,73,74,10,1,0,0,74,75,5,44,0,0,75,100,3,
		0,0,2,76,77,10,7,0,0,77,79,5,37,0,0,78,80,5,40,0,0,79,78,1,0,0,0,79,80,
		1,0,0,0,80,81,1,0,0,0,81,100,5,42,0,0,82,84,10,3,0,0,83,85,5,40,0,0,84,
		83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,36,0,0,87,96,5,4,0,0,88,
		93,3,0,0,0,89,90,5,6,0,0,90,92,3,0,0,0,91,89,1,0,0,0,92,95,1,0,0,0,93,
		91,1,0,0,0,93,94,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,96,88,1,0,0,0,96,
		97,1,0,0,0,97,98,1,0,0,0,98,100,5,5,0,0,99,52,1,0,0,0,99,55,1,0,0,0,99,
		58,1,0,0,0,99,61,1,0,0,0,99,64,1,0,0,0,99,70,1,0,0,0,99,73,1,0,0,0,99,
		76,1,0,0,0,99,82,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,
		0,102,1,1,0,0,0,103,101,1,0,0,0,104,110,5,60,0,0,105,110,5,62,0,0,106,
		110,5,63,0,0,107,110,7,4,0,0,108,110,5,42,0,0,109,104,1,0,0,0,109,105,
		1,0,0,0,109,106,1,0,0,0,109,107,1,0,0,0,109,108,1,0,0,0,110,3,1,0,0,0,
		111,112,5,59,0,0,112,5,1,0,0,0,13,18,25,29,35,50,66,79,84,93,96,99,101,
		109
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage
