//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JadncFilters.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class JadncFiltersParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, HASH=23, NOT_EQ1=24, NOT_EQ2=25, 
		K_ADD=26, K_AND=27, K_AS=28, K_CASE=29, K_CAST=30, K_DEFAULT=31, K_ELSE=32, 
		K_END=33, K_IF=34, K_IN=35, K_IS=36, K_ISNULL=37, K_LIKE=38, K_NOT=39, 
		K_NOTNULL=40, K_NULL=41, K_OF=42, K_OR=43, K_REGEXP=44, K_THEN=45, K_TO=46, 
		K_WHEN=47, K_STRING=48, K_NUMBER=49, K_DATE=50, K_BOOLEAN=51, K_TRUE=52, 
		K_FALSE=53, K_YES=54, K_NO=55, K_HAS=56, K_TYPE=57, K_ANY=58, IDENTIFIER_PART=59, 
		NUMERIC_LITERAL=60, STRING_LITERAL=61, DATE_LITERAL=62, SPACES=63, UNEXPECTED_CHAR=64;
	public const int
		RULE_expr = 0, RULE_identifier = 1;
	public static readonly string[] ruleNames = {
		"expr", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'#'", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "HASH", "NOT_EQ1", "NOT_EQ2", 
		"K_ADD", "K_AND", "K_AS", "K_CASE", "K_CAST", "K_DEFAULT", "K_ELSE", "K_END", 
		"K_IF", "K_IN", "K_IS", "K_ISNULL", "K_LIKE", "K_NOT", "K_NOTNULL", "K_NULL", 
		"K_OF", "K_OR", "K_REGEXP", "K_THEN", "K_TO", "K_WHEN", "K_STRING", "K_NUMBER", 
		"K_DATE", "K_BOOLEAN", "K_TRUE", "K_FALSE", "K_YES", "K_NO", "K_HAS", 
		"K_TYPE", "K_ANY", "IDENTIFIER_PART", "NUMERIC_LITERAL", "STRING_LITERAL", 
		"DATE_LITERAL", "SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JadncFilters.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JadncFiltersParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JadncFiltersParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JadncFiltersParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OfTypeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(JadncFiltersParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OF() { return GetToken(JadncFiltersParser.K_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TYPE() { return GetToken(JadncFiltersParser.K_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public OfTypeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOfTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IN() { return GetToken(JadncFiltersParser.K_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadncFiltersParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadncFiltersParser.COMMA, i);
		}
		public InExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		public NestedExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(JadncFiltersParser.K_OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterLessExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JadncFiltersParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(JadncFiltersParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JadncFiltersParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(JadncFiltersParser.GT_EQ, 0); }
		public GreaterLessExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterLessExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HasExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_HAS() { return GetToken(JadncFiltersParser.K_HAS, 0); }
		public HasExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_PART() { return GetToken(JadncFiltersParser.IDENTIFIER_PART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadncFiltersParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadncFiltersParser.COMMA, i);
		}
		public FunctionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(JadncFiltersParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(JadncFiltersParser.MINUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(JadncFiltersParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(JadncFiltersParser.K_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public IsNullExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(JadncFiltersParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JadncFiltersParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TRUE() { return GetToken(JadncFiltersParser.K_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FALSE() { return GetToken(JadncFiltersParser.K_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(JadncFiltersParser.K_NULL, 0); }
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JadncFiltersParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(JadncFiltersParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(JadncFiltersParser.MOD, 0); }
		public MulExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIKE() { return GetToken(JadncFiltersParser.K_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public LikeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IF() { return GetToken(JadncFiltersParser.K_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN() { return GetToken(JadncFiltersParser.K_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSE() { return GetToken(JadncFiltersParser.K_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(JadncFiltersParser.K_END, 0); }
		public IfExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JadncFiltersParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(JadncFiltersParser.NOT_EQ2, 0); }
		public EqualExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(JadncFiltersParser.K_AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3472277511725907968L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new NestedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7;
				Match(OPEN_PAR);
				State = 8;
				expr(0);
				State = 9;
				Match(CLOSE_PAR);
				}
				break;
			case 4:
				{
				_localctx = new FunctionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				Match(IDENTIFIER_PART);
				State = 12;
				Match(OPEN_PAR);
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4048738830965014536L) != 0)) {
					{
					State = 13;
					expr(0);
					State = 18;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 14;
						Match(COMMA);
						State = 15;
						expr(0);
						}
						}
						State = 20;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 23;
				Match(CLOSE_PAR);
				}
				break;
			case 5:
				{
				_localctx = new OfTypeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				identifier();
				State = 25;
				Match(K_IS);
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 26;
					Match(K_NOT);
					}
				}

				State = 29;
				Match(K_OF);
				State = 30;
				Match(K_TYPE);
				State = 31;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new HasExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33;
				identifier();
				State = 34;
				Match(K_HAS);
				State = 35;
				identifier();
				}
				break;
			case 7:
				{
				_localctx = new IfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				Match(K_IF);
				State = 38;
				expr(0);
				State = 39;
				Match(K_THEN);
				State = 40;
				expr(0);
				State = 41;
				Match(K_ELSE);
				State = 42;
				expr(0);
				State = 43;
				Match(K_END);
				}
				break;
			case 8:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45;
				Match(K_NOT);
				State = 46;
				expr(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 96;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new MulExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 49;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 50;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12416L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 51;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 53;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 54;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new GreaterLessExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 55;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 56;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 57;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 59;
						_la = TokenStream.LA(1);
						if ( !(_la==ASSIGN || _la==NOT_EQ2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 60;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new LikeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 63;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 62;
							Match(K_NOT);
							}
						}

						State = 65;
						Match(K_LIKE);
						State = 66;
						expr(10);
						}
						break;
					case 6:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 68;
						Match(K_AND);
						State = 69;
						expr(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 71;
						Match(K_OR);
						State = 72;
						expr(2);
						}
						break;
					case 8:
						{
						_localctx = new IsNullExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 74;
						Match(K_IS);
						State = 76;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 75;
							Match(K_NOT);
							}
						}

						State = 78;
						Match(K_NULL);
						}
						break;
					case 9:
						{
						_localctx = new InExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 81;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 80;
							Match(K_NOT);
							}
						}

						State = 83;
						Match(K_IN);
						{
						State = 84;
						Match(OPEN_PAR);
						State = 93;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4048738830965014536L) != 0)) {
							{
							State = 85;
							expr(0);
							State = 90;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 86;
								Match(COMMA);
								State = 87;
								expr(0);
								}
								}
								State = 92;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 95;
						Match(CLOSE_PAR);
						}
						}
						break;
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER_PART() { return GetTokens(JadncFiltersParser.IDENTIFIER_PART); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_PART(int i) {
			return GetToken(JadncFiltersParser.IDENTIFIER_PART, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JadncFiltersParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JadncFiltersParser.DOT, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadncFiltersVisitor<TResult> typedVisitor = visitor as IJadncFiltersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101;
			Match(IDENTIFIER_PART);
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 102;
					Match(DOT);
					State = 103;
					Match(IDENTIFIER_PART);
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,110,2,0,7,0,2,1,7,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,5,0,17,8,0,10,0,12,0,20,9,0,3,0,22,8,0,1,0,1,0,1,0,1,0,3,0,28,8,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,3,0,48,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,
		0,64,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,77,8,0,1,0,1,
		0,1,0,3,0,82,8,0,1,0,1,0,1,0,1,0,1,0,5,0,89,8,0,10,0,12,0,92,9,0,3,0,94,
		8,0,1,0,5,0,97,8,0,10,0,12,0,100,9,0,1,1,1,1,1,1,5,1,105,8,1,10,1,12,1,
		108,9,1,1,1,0,1,0,2,0,2,0,5,3,0,41,41,52,53,60,61,2,0,7,7,12,13,1,0,8,
		9,1,0,18,21,2,0,6,6,25,25,132,0,47,1,0,0,0,2,101,1,0,0,0,4,5,6,0,-1,0,
		5,48,7,0,0,0,6,48,3,2,1,0,7,8,5,3,0,0,8,9,3,0,0,0,9,10,5,4,0,0,10,48,1,
		0,0,0,11,12,5,59,0,0,12,21,5,3,0,0,13,18,3,0,0,0,14,15,5,5,0,0,15,17,3,
		0,0,0,16,14,1,0,0,0,17,20,1,0,0,0,18,16,1,0,0,0,18,19,1,0,0,0,19,22,1,
		0,0,0,20,18,1,0,0,0,21,13,1,0,0,0,21,22,1,0,0,0,22,23,1,0,0,0,23,48,5,
		4,0,0,24,25,3,2,1,0,25,27,5,36,0,0,26,28,5,39,0,0,27,26,1,0,0,0,27,28,
		1,0,0,0,28,29,1,0,0,0,29,30,5,42,0,0,30,31,5,57,0,0,31,32,3,2,1,0,32,48,
		1,0,0,0,33,34,3,2,1,0,34,35,5,56,0,0,35,36,3,2,1,0,36,48,1,0,0,0,37,38,
		5,34,0,0,38,39,3,0,0,0,39,40,5,45,0,0,40,41,3,0,0,0,41,42,5,32,0,0,42,
		43,3,0,0,0,43,44,5,33,0,0,44,48,1,0,0,0,45,46,5,39,0,0,46,48,3,0,0,3,47,
		4,1,0,0,0,47,6,1,0,0,0,47,7,1,0,0,0,47,11,1,0,0,0,47,24,1,0,0,0,47,33,
		1,0,0,0,47,37,1,0,0,0,47,45,1,0,0,0,48,98,1,0,0,0,49,50,10,14,0,0,50,51,
		7,1,0,0,51,97,3,0,0,15,52,53,10,13,0,0,53,54,7,2,0,0,54,97,3,0,0,14,55,
		56,10,12,0,0,56,57,7,3,0,0,57,97,3,0,0,13,58,59,10,11,0,0,59,60,7,4,0,
		0,60,97,3,0,0,12,61,63,10,9,0,0,62,64,5,39,0,0,63,62,1,0,0,0,63,64,1,0,
		0,0,64,65,1,0,0,0,65,66,5,38,0,0,66,97,3,0,0,10,67,68,10,2,0,0,68,69,5,
		27,0,0,69,97,3,0,0,3,70,71,10,1,0,0,71,72,5,43,0,0,72,97,3,0,0,2,73,74,
		10,8,0,0,74,76,5,36,0,0,75,77,5,39,0,0,76,75,1,0,0,0,76,77,1,0,0,0,77,
		78,1,0,0,0,78,97,5,41,0,0,79,81,10,4,0,0,80,82,5,39,0,0,81,80,1,0,0,0,
		81,82,1,0,0,0,82,83,1,0,0,0,83,84,5,35,0,0,84,93,5,3,0,0,85,90,3,0,0,0,
		86,87,5,5,0,0,87,89,3,0,0,0,88,86,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
		90,91,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,93,85,1,0,0,0,93,94,1,0,0,0,
		94,95,1,0,0,0,95,97,5,4,0,0,96,49,1,0,0,0,96,52,1,0,0,0,96,55,1,0,0,0,
		96,58,1,0,0,0,96,61,1,0,0,0,96,67,1,0,0,0,96,70,1,0,0,0,96,73,1,0,0,0,
		96,79,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,1,1,0,0,0,
		100,98,1,0,0,0,101,106,5,59,0,0,102,103,5,2,0,0,103,105,5,59,0,0,104,102,
		1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,3,1,0,0,0,
		108,106,1,0,0,0,12,18,21,27,47,63,76,81,90,93,96,98,106
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage
