//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JadncFilters.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class JadncFiltersParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, HASH=23, NOT_EQ1=24, NOT_EQ2=25, 
		K_ADD=26, K_AND=27, K_AS=28, K_CASE=29, K_CAST=30, K_DEFAULT=31, K_ELSE=32, 
		K_END=33, K_IF=34, K_IN=35, K_IS=36, K_ISNULL=37, K_LIKE=38, K_NOT=39, 
		K_NOTNULL=40, K_NULL=41, K_OF=42, K_OR=43, K_REGEXP=44, K_THEN=45, K_TO=46, 
		K_WHEN=47, K_STRING=48, K_NUMBER=49, K_DATE=50, K_BOOLEAN=51, K_TRUE=52, 
		K_FALSE=53, K_YES=54, K_NO=55, K_HAS=56, K_TYPE=57, IDENTIFIER_PART=58, 
		NUMERIC_LITERAL=59, STRING_LITERAL=60, DATE_LITERAL=61, SPACES=62, UNEXPECTED_CHAR=63;
	public const int
		RULE_expr = 0, RULE_identifier = 1;
	public static readonly string[] ruleNames = {
		"expr", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'#'", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "HASH", "NOT_EQ1", "NOT_EQ2", 
		"K_ADD", "K_AND", "K_AS", "K_CASE", "K_CAST", "K_DEFAULT", "K_ELSE", "K_END", 
		"K_IF", "K_IN", "K_IS", "K_ISNULL", "K_LIKE", "K_NOT", "K_NOTNULL", "K_NULL", 
		"K_OF", "K_OR", "K_REGEXP", "K_THEN", "K_TO", "K_WHEN", "K_STRING", "K_NUMBER", 
		"K_DATE", "K_BOOLEAN", "K_TRUE", "K_FALSE", "K_YES", "K_NO", "K_HAS", 
		"K_TYPE", "IDENTIFIER_PART", "NUMERIC_LITERAL", "STRING_LITERAL", "DATE_LITERAL", 
		"SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JadncFilters.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JadncFiltersParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JadncFiltersParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JadncFiltersParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OfTypeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(JadncFiltersParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OF() { return GetToken(JadncFiltersParser.K_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TYPE() { return GetToken(JadncFiltersParser.K_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public OfTypeExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class InExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IN() { return GetToken(JadncFiltersParser.K_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadncFiltersParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadncFiltersParser.COMMA, i);
		}
		public InExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class NestedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		public NestedExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(JadncFiltersParser.K_OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class GreaterLessExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JadncFiltersParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(JadncFiltersParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JadncFiltersParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(JadncFiltersParser.GT_EQ, 0); }
		public GreaterLessExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class HasExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_HAS() { return GetToken(JadncFiltersParser.K_HAS, 0); }
		public HasExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class FunctionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_PART() { return GetToken(JadncFiltersParser.IDENTIFIER_PART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(JadncFiltersParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(JadncFiltersParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JadncFiltersParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadncFiltersParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadncFiltersParser.COMMA, i);
		}
		public FunctionExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(JadncFiltersParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(JadncFiltersParser.MINUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class IsNullExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(JadncFiltersParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(JadncFiltersParser.K_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public IsNullExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(JadncFiltersParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JadncFiltersParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TRUE() { return GetToken(JadncFiltersParser.K_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FALSE() { return GetToken(JadncFiltersParser.K_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(JadncFiltersParser.K_NULL, 0); }
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class MulExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JadncFiltersParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(JadncFiltersParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(JadncFiltersParser.MOD, 0); }
		public MulExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class LikeExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIKE() { return GetToken(JadncFiltersParser.K_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(JadncFiltersParser.K_NOT, 0); }
		public LikeExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class IfExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IF() { return GetToken(JadncFiltersParser.K_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN() { return GetToken(JadncFiltersParser.K_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSE() { return GetToken(JadncFiltersParser.K_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(JadncFiltersParser.K_END, 0); }
		public IfExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class IdentifierExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class EqualExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JadncFiltersParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(JadncFiltersParser.NOT_EQ2, 0); }
		public EqualExprContext(ExprContext context) { CopyFrom(context); }
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(JadncFiltersParser.K_AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1742895254815637504L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new NestedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7;
				Match(OPEN_PAR);
				State = 8;
				expr(0);
				State = 9;
				Match(CLOSE_PAR);
				}
				break;
			case 4:
				{
				_localctx = new FunctionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				Match(IDENTIFIER_PART);
				State = 12;
				Match(OPEN_PAR);
				State = 25;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR:
				case COMMA:
				case K_IF:
				case K_NOT:
				case K_NULL:
				case K_TRUE:
				case K_FALSE:
				case IDENTIFIER_PART:
				case NUMERIC_LITERAL:
				case STRING_LITERAL:
					{
					State = 14;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 13;
						Match(COMMA);
						}
					}

					State = 16;
					expr(0);
					State = 21;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 17;
						Match(COMMA);
						State = 18;
						expr(0);
						}
						}
						State = 23;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case STAR:
					{
					State = 24;
					Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 27;
				Match(CLOSE_PAR);
				}
				break;
			case 5:
				{
				_localctx = new OfTypeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28;
				identifier();
				State = 29;
				Match(K_IS);
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 30;
					Match(K_NOT);
					}
				}

				State = 33;
				Match(K_OF);
				State = 34;
				Match(K_TYPE);
				State = 35;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new HasExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				identifier();
				State = 38;
				Match(K_HAS);
				State = 39;
				identifier();
				}
				break;
			case 7:
				{
				_localctx = new IfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41;
				Match(K_IF);
				State = 42;
				expr(0);
				State = 43;
				Match(K_THEN);
				State = 44;
				expr(0);
				State = 45;
				Match(K_ELSE);
				State = 46;
				expr(0);
				State = 47;
				Match(K_END);
				}
				break;
			case 8:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49;
				Match(K_NOT);
				State = 50;
				expr(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 100;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new MulExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 54;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12416L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 55;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 57;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 58;
						expr(14);
						}
						break;
					case 3:
						{
						_localctx = new GreaterLessExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 59;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 60;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 61;
						expr(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 62;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 63;
						_la = TokenStream.LA(1);
						if ( !(_la==ASSIGN || _la==NOT_EQ2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 64;
						expr(12);
						}
						break;
					case 5:
						{
						_localctx = new LikeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 65;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 67;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 66;
							Match(K_NOT);
							}
						}

						State = 69;
						Match(K_LIKE);
						State = 70;
						expr(10);
						}
						break;
					case 6:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 71;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 72;
						Match(K_AND);
						State = 73;
						expr(3);
						}
						break;
					case 7:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 74;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 75;
						Match(K_OR);
						State = 76;
						expr(2);
						}
						break;
					case 8:
						{
						_localctx = new IsNullExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 77;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 78;
						Match(K_IS);
						State = 80;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 79;
							Match(K_NOT);
							}
						}

						State = 82;
						Match(K_NULL);
						}
						break;
					case 9:
						{
						_localctx = new InExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 83;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 85;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 84;
							Match(K_NOT);
							}
						}

						State = 87;
						Match(K_IN);
						{
						State = 88;
						Match(OPEN_PAR);
						State = 97;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2031126197903032328L) != 0)) {
							{
							State = 89;
							expr(0);
							State = 94;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 90;
								Match(COMMA);
								State = 91;
								expr(0);
								}
								}
								State = 96;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 99;
						Match(CLOSE_PAR);
						}
						}
						break;
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER_PART() { return GetTokens(JadncFiltersParser.IDENTIFIER_PART); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_PART(int i) {
			return GetToken(JadncFiltersParser.IDENTIFIER_PART, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JadncFiltersParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JadncFiltersParser.DOT, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 105;
			Match(IDENTIFIER_PART);
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 106;
					Match(DOT);
					State = 107;
					Match(IDENTIFIER_PART);
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,114,2,0,7,0,2,1,7,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,
		15,8,0,1,0,1,0,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,3,0,26,8,0,1,0,1,0,
		1,0,1,0,3,0,32,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,3,0,52,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,3,0,68,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		3,0,81,8,0,1,0,1,0,1,0,3,0,86,8,0,1,0,1,0,1,0,1,0,1,0,5,0,93,8,0,10,0,
		12,0,96,9,0,3,0,98,8,0,1,0,5,0,101,8,0,10,0,12,0,104,9,0,1,1,1,1,1,1,5,
		1,109,8,1,10,1,12,1,112,9,1,1,1,0,1,0,2,0,2,0,5,3,0,41,41,52,53,59,60,
		2,0,7,7,12,13,1,0,8,9,1,0,18,21,2,0,6,6,25,25,138,0,51,1,0,0,0,2,105,1,
		0,0,0,4,5,6,0,-1,0,5,52,7,0,0,0,6,52,3,2,1,0,7,8,5,3,0,0,8,9,3,0,0,0,9,
		10,5,4,0,0,10,52,1,0,0,0,11,12,5,58,0,0,12,25,5,3,0,0,13,15,5,5,0,0,14,
		13,1,0,0,0,14,15,1,0,0,0,15,16,1,0,0,0,16,21,3,0,0,0,17,18,5,5,0,0,18,
		20,3,0,0,0,19,17,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,
		26,1,0,0,0,23,21,1,0,0,0,24,26,5,7,0,0,25,14,1,0,0,0,25,24,1,0,0,0,25,
		26,1,0,0,0,26,27,1,0,0,0,27,52,5,4,0,0,28,29,3,2,1,0,29,31,5,36,0,0,30,
		32,5,39,0,0,31,30,1,0,0,0,31,32,1,0,0,0,32,33,1,0,0,0,33,34,5,42,0,0,34,
		35,5,57,0,0,35,36,3,2,1,0,36,52,1,0,0,0,37,38,3,2,1,0,38,39,5,56,0,0,39,
		40,3,2,1,0,40,52,1,0,0,0,41,42,5,34,0,0,42,43,3,0,0,0,43,44,5,45,0,0,44,
		45,3,0,0,0,45,46,5,32,0,0,46,47,3,0,0,0,47,48,5,33,0,0,48,52,1,0,0,0,49,
		50,5,39,0,0,50,52,3,0,0,3,51,4,1,0,0,0,51,6,1,0,0,0,51,7,1,0,0,0,51,11,
		1,0,0,0,51,28,1,0,0,0,51,37,1,0,0,0,51,41,1,0,0,0,51,49,1,0,0,0,52,102,
		1,0,0,0,53,54,10,14,0,0,54,55,7,1,0,0,55,101,3,0,0,15,56,57,10,13,0,0,
		57,58,7,2,0,0,58,101,3,0,0,14,59,60,10,12,0,0,60,61,7,3,0,0,61,101,3,0,
		0,13,62,63,10,11,0,0,63,64,7,4,0,0,64,101,3,0,0,12,65,67,10,9,0,0,66,68,
		5,39,0,0,67,66,1,0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,70,5,38,0,0,70,101,
		3,0,0,10,71,72,10,2,0,0,72,73,5,27,0,0,73,101,3,0,0,3,74,75,10,1,0,0,75,
		76,5,43,0,0,76,101,3,0,0,2,77,78,10,8,0,0,78,80,5,36,0,0,79,81,5,39,0,
		0,80,79,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,101,5,41,0,0,83,85,10,4,
		0,0,84,86,5,39,0,0,85,84,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,5,35,
		0,0,88,97,5,3,0,0,89,94,3,0,0,0,90,91,5,5,0,0,91,93,3,0,0,0,92,90,1,0,
		0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,98,1,0,0,0,96,94,1,0,
		0,0,97,89,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,101,5,4,0,0,100,53,1,
		0,0,0,100,56,1,0,0,0,100,59,1,0,0,0,100,62,1,0,0,0,100,65,1,0,0,0,100,
		71,1,0,0,0,100,74,1,0,0,0,100,77,1,0,0,0,100,83,1,0,0,0,101,104,1,0,0,
		0,102,100,1,0,0,0,102,103,1,0,0,0,103,1,1,0,0,0,104,102,1,0,0,0,105,110,
		5,58,0,0,106,107,5,2,0,0,107,109,5,58,0,0,108,106,1,0,0,0,109,112,1,0,
		0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,3,1,0,0,0,112,110,1,0,0,0,13,14,
		21,25,31,51,67,80,85,94,97,100,102,110
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JsonApiDotNetCore.ExtendedQuery.QueryLanguage
